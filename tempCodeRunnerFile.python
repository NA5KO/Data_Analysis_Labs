import numpy as np
tableau = np.array([[5, 3 ,2],
                    [2, 6 ,1],
                    [4, 1 ,7],
                    [7, 4 ,0]])

somme_poids = 0
nb_individus = len(tableau)

# Calcul des poids
for i in range(nb_individus):
    somme_poids += tableau[i][2]
poids = [] # contiendra les poids des individus
for i in range(nb_individus):
    poids.append(tableau[i][2]/somme_poids)
for i in range(nb_individus):
    print("poids", i+1, " = ", poids[i])

# ceux qui ont un poids non nul et sans considérer les poids
X = np.array([[5, 3],[2, 6],[4, 1]]) 
print("\nX = \n", X)

D_demi = np.diag(np.sqrt(poids[0:3])) # sans le dernier indiv avec le poids null
print("\nD(1/2) = \n", D_demi)

# matrice de travail W = D(1/2)X
matrice_travail = np.dot(D_demi, X)
print("\nmatrice de travail = \n", matrice_travail)

# matrice à diagonaliser W'W
X1 = matrice_travail.T # transposée de W
produit = np.dot(X1, matrice_travail)
print("\nmatrice à diagonaliser = \n", produit)

# Calcul des valeurs propres et vecteurs propres
valeursPropres, vecteursPropres = np.linalg.eig(produit)
u1 = vecteursPropres[:,0] 
u2 = vecteursPropres[:,1] 
print("\nvecteur propre u1: ", u1)
print("vecteur propre u2: ", u2)

# Nouvelles coordonnées dans B2
nv_coordonnees = np.dot(X, vecteursPropres)
print("\n",nv_coordonnees)